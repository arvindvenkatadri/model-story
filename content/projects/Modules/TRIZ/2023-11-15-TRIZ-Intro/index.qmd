---
title: "TRIZ â€“ An Inventive Problem-Solving Method"
author: "Arvind V."
date: 15/Nov/2023
image: images/featured.jpg
categories:
  - TRIZ
tags:
  - TRIZ
  - 48 TRIZ Parameters
  - Inventive Principles
  - Creativity Systems Model
  - Making Metaphors
---

```{r}
#| label: setup
#| echo: false
library(knitr)

```

```{r}
#| echo: false
#| out-width: "50%"
#| out-height: "25%"
#| fig-align: center
knitr::include_graphics("images/featured.jpg")

```


## {{< iconify emojione japanese-symbol-for-beginner >}} Introduction

```{r}
#| echo: false
#| out-width: "75%"
#| fig-align: center
knitr::include_graphics("images/chesterton-riddle.jpeg")

```

TRIZ is a system of Inventive Problem Solving created by Genrikh
Altshuller. Altshuller, was born in Russia in 1926, made his first
invention at age 14 (9th Grade), and was later educated as a mechanical
engineer. At the time he started working on TRIZ, in 1946, he was
employed in the patent department of the Soviet navy, assisting
inventors in filing their patents, in Baku, Azerbaijan. While there he
became intrigued by the question of how an invention happens:

> Is it a matter of luck? The result of a mental "light bulb" turning
> on, as in the comics? Or can inventions be seen as the result of
> systematic patterns of inventive thinking?

Altshuller adopted an *empirical approach* to answering this question.
He studied thousands of patents, looking for commonalities, repetitive
patterns, and principles of inventive thought. As he found these, he
codified and documented them. His results, when eventually published,
attracted many enthusiasts who continued and expanded the work over the
years, reviewing what is now estimated to be more than three million
patents worldwide. TRIZ is actively used in Companies such as Boeing,
Bridgestone, Eastman Kodak, Ford Motor Company, Harley-Davidson Motor
Company, Hewlett-Packard, Illinois Tool Works, Inficon, Ingersoll Rand,
Kimberly-Clark, L.G. Electronics, Lucent Technologies, Michelin,
National Semiconductor, NASA, Philips, Rolls-Royce, Samsung, Siemens,
Western Digital, and Xerox, among others.

Altshuller found that the most inventive of patents did two things:

1.  They stated PROBLEMS as CONTRADICTIONs (using just 48 unique
    phrases)
2.  These CONTRADICTIONs were resolved across a wide variety of patents
    using an astonishingly few INVENTIVE PRINCIPLEs. (only 40 in
    number!)

## {{< iconify healthicons world-care-outline >}} There is World of Problems!

Let us take our first step into the world of TRIZ. What did you think of
immediately when you saw the first picture on this page? You surely saw
the Contradiction: it *is* graffiti but claiming not to be! In TRIZ, the
fundamental way of looking at an Inventive Design Problem is to discover
and propose Contradictions. These are rendered in as simple and stark a
language as possible...the starker the better!

What sort of Contradictions do we see in these familiar objects below ?
What is good and what is not so good? Could that be the source of a
problem to solve?

::: columns
::: {.column width="10%"}
:::

::: {.column width="30%"}
```{r}
#| echo: false
#| out-width: "70%"
#| out-height: "70%"

knitr::include_graphics("images/chain.jpg")

```
:::

::: {.column width="30%"}
```{r}
#| echo: false
#| out-width: "70%"
#| out-height: "70%"

knitr::include_graphics("images/pizza.jpg")


```
:::

::: {.column width="30%"}
```{r}
#| echo: false
#| out-width: "70%"
#| out-height: "70%"


knitr::include_graphics("images/wrench.jpg")

```
:::
:::

Contemplate and note down for each Object: Does it embody a
CONTRADICTION?

Yes, each one does, in its own way: The pizza box lid collapses on the
pizza when it is hot and spoils the topping. The wrench must be turned
by pushing against its narrower edge; we would find it easier and less
painful if we could apply force on the broader surface of the handle.
And the chain? Everyone know it needs to be stiff and strong to be able
to pull the wheel, and yet flexible enough to go around the
sprocket...and get horribly entangled, leading to greasy fingers!

In this way we look at OBJECTS, PROCESSES, METHODS, PRODUCTS, and indeed
CIRCUMSTANCES to find CONTRADICTIONs!

Here are some more examples in the figure below:

::: columns
::: {.column width="45%"}
```{r}
#| echo: false
#| fig-cap: Juice
knitr::include_graphics("images/Juice.jpeg")

```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
```{r}
#| echo: false
#| fig-cap: Snails
#| out-width: "65%"
knitr::include_graphics("images/Snails-1.jpeg")

```
:::
:::

What could be our Contradictions here?

> Fresh Juice is good for health, but ads from juice companies wish to
> portray it as harmful, and they may not be able to sell!
>
> The ground is hot for a snail, but above ground it is visible to
> predators.

## {{< iconify gis position-man >}} Appreciate the Situation

We do not always contemplate only objects; indeed, as inventors, we want
to be able to make objects or systems. What we more commonly contemplate
is [***a situation***]{.underline}. So how does one assess a situation?
We might use what is called an Ishikawa Fishbone Diagram. This is shown
below.

```{r}
#| echo: false
#| fig-cap: "Ishikawa Fishbone Diagram"
knitr::include_graphics("images/IshikawaDiagram.png")

```

There are many versions of this diagram depending upon the DOMAIN it is
applied in. This diagram is very helpful to us in assessing resources
and processes, and watching how their interplay in a situation could
lead to...a Contradiction.

## {{< iconify icon-park-outline thinking-problem >}} Determining the Administrative Contradiction

In the Ishikawa diagram, each of the items listed is considered a TRIZ
KNOB, which is either in our control or not. By turning these KNOBs in
either direction we can change a specific PARAMETER that the KNOB
affects. This change may improve the situation for us but we may find
that something else typically gets worse. This is the source of our
CONTRADICTION for Situations. When this happens, we can usually state a
CONTRADICTION in simple English.

For example: `We want to boil milk, but we get bored watching it boil.`

Here Time and the Milk would both have been listed in your Ishikawa as
Resources. You can further document your analysis of the Object or
Situation using the following questionnaire 5W+H format:

1.  What does the problem seem to be?
2.  Who has the problem?
3.  When does the problem occur? All the time? Under certain
    circumstances?
4.  Where does the problem occur?
5.  Why does the problem occur? ("Ask why 5 times" -- W. Edwards Deming)
6.  How does the problem occur?

This will help in "aiming" the solutions that TRIZ offers, in the right
way.

**STEP1**: In TRIZ, this way of expressing a Problem as a simple
CONTRADICTION is referred to as stating an ADMINISTRATIVE CONTRADICTION
(AC). You should be able to state an Administrative Contradiction in the
following (loose!) sentence structure --- Items in `< >` come from the
Ishikawa and your 5W + H questions).

`When we, as < WHO / MANPOWER >, attempt to perform < HOW / METHOD > during <WHEN> on < WHERE / MACHINERY / KNOB>, we improve <EFFECT>, but lose out on <negative EFFECT / KNOB>`

## {{< iconify pepicons-pop contract-off >}} Stating a Technical Contradiction (TC)

Now that we know how problems can be stated as simple *Administrative
Contradictions (AC)*, we need to take the next step and make what TRIZ
calls Technical Contradictions (TC). Altshuller found that problems
across domains could be expressed in a "TRIZ Language," a set of
metaphoric phrases that are an integral part of (classical) TRIZ. We
will call these the 48 TRIZ Parameters. Some examples of TRIZ
Parameters: *Weight of a stationary Object,* *Loss of Substance*, and
*Temperature*.

Every problem could be described as a contradiction using some pair of
these 48 parameters. These metaphoric phrases are simple enough and
provide rich troves for imaginative problem solving. Expressing our
specific problem in this way allowed us to see the similarity it has
with problems in other domains and helps us to leverage solutions from
there.

**STEP 2**: Take the AC and state it in terms of these 48 TRIZ
Parameters, for example:
`Improve Loss of Substance and not worsen Weight of a Stationary Object`
; `Improve Loss of Information and not worsen Power`

## {{< iconify mdi data-matrix >}} Using the TRIZ Contradiction Matrix

Armed with our TCs, we plug them into the TRIZ Contradiction Matrix. The
TRIZ Matrix is a 48 X 48 structure, with every possible TRIZ Parameter
being paired with every other TRIZ Parameter.

**STEP3**: One chooses one TRIZ Parameter from the TC as the ROW and the
other as the COLUMN in the TRIZ Matrix. At their intersection lies a
single cell which contains one or more TRIZ Inventive Principles. These
Inventive Principles have been derived as solutions from hundreds and
thousands of patents.

**STEP4**: These Inventive Principles must now be applied into our
Problem to solve it. This is the TRIZ Contradiction Matrix Workflow.

## {{< iconify pajamas issue-type-test-case >}} A Complete Example

Let us consider the example of the pizza box that we saw at the start of
this article. (We will not trouble to make the Ishikawa for this simple
problem) Here is our AC:

`AC: The pizza needs to be hot but the steam it gives off must not make the lid collapse and ruin the pizza`

We can convert this into a TC by choosing several pairs of TRIZ
Parameters:

`TC: Improve 21(Temperature) while not worsening 22(Stability)!`

Looking up the [**TRIZ Contradiction
Matrix**](https://av-quarto.netlify.app/content/materials/ContradictionMatrix2003.pdf)`(Row#21 Col#22)`,
we get the TRIZ Inventive Principles:
`24: Intermediary. 35: Parameter Change, 32: Colour Change, 3: Local Quality.`

Looking at `IP 24 (Intermediary`) we need to think of something between
the pizza and the lid, and `IP 3 ( Local Quality`) suggests that it
should we quite small, or "local" compared to the size of the pizza!
What could that be? This!

```{r}
#| echo: false
#| fig-cap: "Pizza Saver or Pizza Table"
#| out-width: "50%"
knitr::include_graphics("images/pizzatable.jpg")

```

## {{< iconify fluent-mdl2 decision-solid >}} Conclusion

The TRIZ process allows us to leverage solutions that have been obtained
from a vast number of patents. The TRIZ language allows us to access
these solutions by expressing our specific problem in terms of the TRIZ
Parameters, and leads us to the relevant TRIZ Inventive Principles which
can solve our problem!

Worth mastering!!

## {{< iconify ooui references-ltr >}} References

1.  Open Source TRIZ. \<[TRIZ PowerTools - Free downloads ebooks pdfs
    teaching materials
    (opensourcetriz.com)](http://www.opensourcetriz.com/)\>

2.  Jack Hipple's
    Webpage.<https://innovation-triz.com/personnel/JHipple.html>

3.  Valeri Souchkov's Webpage.<http://www.xtriz.com/ValeriSouchkov.htm>
