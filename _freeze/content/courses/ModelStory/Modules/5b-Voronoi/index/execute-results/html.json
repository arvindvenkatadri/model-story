{
  "hash": "77579bc9d70231e5409c74da5060e5d0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"\\U0001F579 Measuring and Playing with Proximity\"\nauthor: \"Arvind V.\"\ndate: 2021-12-11\ndate-modified: \"2025-07-30\"\norder: 60\nimage: featured.jpg\ncategories:\n- Voronoi Diagram\n- Delaunay Triangulation\n- Thiessen Polygons\n- Silhouette Diagrams\n- Geogebra\n- Herds and Predators\n- Proximity\n- Distance\neditor_options: \n  markdown: \n    wrap: 72\n---\n\n\n::: {.cell}\n\n:::\n\n\n#### Don't Stand so Close to Me\n\n## A Model for Proximity: The Voronoi and the Delaunay Diagrams\n\nSo how do we model \"proximity\"? Let us take a quick look at this\ndescription of <u>[**Predator-Prey\nDynamics.**](/pdf/Proximity/FollowingtheHerd.pdf)</u>\n\n### Plotting the Delaunay and Voronoi Diagrams\n\nSo here is an example of a computationally plotted Delaunay\nTriangulation and Voronoi Diagram:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=2100}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=2100}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-3.png){width=2100}\n:::\n:::\n\n\nHow do we plot these diagrams?\n\nWe will use this tool:\n<u>[**Geogebra**](https://www.geogebra.org/classic)</u>\n\nDownload and install this on your laptops. You can also use it in your\nbrowser <u><https://www.geogebra.org/classic?lang=en></u> and download\nthe Geogebra (*.ggb*) files that you create.\n\n1.  Exercise 1: Let us first see <u>[**Soho with the Voronoi\n    Diagram**](/pdf/Proximity/SohoMap.ggb)</u>\n\nNow let us make such a diagram step by step:\n\n1.  Exercise 2: Let us try with just three points and see what we need\n    to do to plot the Voronoi Diagram.\n\n2.  Exercise 3: With 4 points: <u>[Four Pointer\n    Voronoi](/pdf/Proximity/four%20points.ggb)</u>\n\n3.  Exercise 4: Let us now add more points. How do we make a multi-point\n    Voronoi? We need to make a <u>[**\"list of points\" in\n    Geogebra**](/pdf/Proximity/VoronoiLargeNoOfPointsInGeogebra.pdf)</u>\n\n### Discussion\n\n-   Did you see how the Delaunay Triangulation seems to \"dislike\"\n    obtuse-angles, and changes the triangulation pattern when a certain\n    (sum of) angles become more than 180?\n-   Wasn't that a very Kandinsky-like thing to do, even for an\n    algorithm?\n-   The Delaunay Triangulation gives us a set of triangular elements\n    that cover our desired surface\n-   The Voronoi Diagram uses the Delaunay to give us *possibly infinite*\n    proximal neighbourhoods.\n\n## Fun Stuff with Geogebra and Voronoi\n\n1.  Predator Prey Movement....\n\n-   Create a set of points in Geogebra.\n-   Colour/Shape one of the outermost points as a predator which circles\n    the herd.\n-   Use the Voronoi diagram to model the *Zone of Danger* for each of\n    the animals in the inner herd.\n-   Try **Animation** in Geogebra !!\n\n2.  Service Areas with Voronoi\n\n-   Import a 5km \\* 5km square of area in your home town, from Google\n    Maps, into Geogebra.\n-   Locate points of interest, all in one category ( ATMs, Post Offices,\n    Hospitals, Police Stations...)\n-   Plot the Voronoi Diagram to show the area served by each such\n    institution.\n-   Calculate the area in Geogebra.\n-   Assume a flat population/sqkm and use that to calculate the number\n    of people served by each.\n\n**All** of this can be done without leaving Geogebra !!\n\n3.  Voronoi Portraits and Facial Recognition\n\nA. My name is Arnold Schwarzenegger\n\n-   Take a picture of yourself and import it into Geogebra\n-   Plot Points on the Portrait such that the main facial features are\n    defined.\n-   Use a Delaunay Triangulation of these points to create a Portrait.\n\n![](AVinMath.jpeg)\n\nB. My Face is My Fortune\n\n-   Do the same for a famous person, past or present.\n-   Run a small survey in the class to see how many people can recognize\n    celebrity!\n\n## Other Distances?\n\n### Hamming Distances\n\nWe have used the simplest and most common of geometric distances between\nentities, the **Euclidean Distance** to model proximity. Are there other\n*measures of distance*?\n\n-   How would you measure distance between *digital words*? For example\n    $10010011$ and $11011011$?\n\n> The **Hamming distance** between two equal-length strings of symbols\n> is the number of positions at which the corresponding symbols are\n> different. The symbols may be letters, bits, or decimal digits, among\n> other possibilities. For example, the Hamming distance between:\n> \"karolin\" and \"kathrin\" is 3. \"karolin\" and \"kerstin\" is 3. \"kathrin\"\n> and \"kerstin\" is 4. 0000 and 1111 is 4. 2173896 and 2233796 is 3.\n\nThe Hamming Distance can be calculated using a logical operation known\nas <u>[\"Exclusive-OR\" or\n\"XOR\"](https://www.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation)</u>.\n\n### Great Circle Distances\n\nHow would you measure distance over a *curved surface* such as the\nearth?\n\nView the path here: <u><https://www.greatcirclemap.com/></u> Calculate\ndistances here: <u><https://www.gpsvisualizer.com/calculators></u>\n\n### Taxicab Distances\n\nAnd if a *man hatta* live in New York?\n\n![](taxicab-manhattan-grid-layout-paths.gif)\n\n![](taxicab-manhattan-grid-taxicab-distance.png)\n\nWe will use the Euclidean and maybe other concepts of distance when we\nget into our Machine Learning models!\n\n### Plotting Sihouette Diagrams\n\nTo be written up!!\n<https://orange3.readthedocs.io/projects/orange-visual-programming/en/latest/widgets/visualize/silhouetteplot.html>\n\n## So where are all these Proximities used?\n\n### Proximities in the GPS System\n\nThe GPS system is all about wanting to know if one is *proximate* to a\ndesired landmark! But how does it work?\n\nBased on a measurement of two proximity scores, both electronic. One in\nSpace and one in Time. Oooh, cryptic, isn't it? Here is how it works:\n\n-   Users receive GPS transmissions from more than one satellite (to\n    improve accuracy; more later).\n\n-   Each Satellite is given a **unique digital signature code**, called\n    its *Coarse/Acquisition*, or C/A Code.\n\n-   This code is a digital one-zero based sequence, which repeats after\n    a week.\n\n-   The code ones and zeroes are called **chips**; the chips are output\n    by each satellite at a rate of 1.023 MHz. ( i.e. a little faster\n    than a million chips per second)\n\n-   All satellites use an on-board time clock. All satellites are\n    synchronized and it is the same time on all satellites, regardless\n    of where they are in the sky.\n\n-   A User Receiver cannot understand what the satellite is saying,\n    UNLESS it removes/wipes off the signature used by the satellite. So\n    think of this in ***proximity*** terms: the user needs to know the\n    Signature Sequence and also be **in sync aligned** with it, chip for\n    chip.\n\n-   One the signature is removed, what remains is what the satellite is\n    saying.\n\n-   GPS#5 उवाच:\n\n    -   \"It is 4 PM on my onboard clock\";\n    -   \"The ionosphere is doing weird things so please include that\n        weirdness in your position computation etc\";\n    -   Other stuff, called the **satellite ephimeris** (which we may\n        discuss in class)\n\nBut <u>[Houston, we have a problem](https://youtu.be/YwG4F-16Tno)</u>,\nbut right here on the ground, mercifully. The problem is, wait for it,\n**the Speed of Light**. And it is a **good problem to have**.\n\n-   When you detect say GPS#5 saying it is 4 PM, that signal came from\n    GPS#5 to you at the speed of light, so ***by the time it arrives***,\n    the time on the satellite is already 4PM + 150 microseconds.\n\n-   Since different GPS satellites we can see are at different\n    ***ranges***, we receive different times from 5 different GPS\n    satellites.\n\n-   Then we can set up a set of linear matrix equations in these\n    variables:\n\n    -   \"Received Time\" from each satellite (***Pseudo-Range***)\n    -   Long and Lat (called a ***Position Fix***);\n    -   Absolute Time (***Time Fix***)\n\n-   Which we solve to obtain both Position Fix and Time Fix.\n\nSo in summary, the user needs to calculate two proximities:\n\n-   A **C/A code proximity**, measured by the Hamming Distance between\n    the received code and a locally generated C/A code. Which code to\n    generate locally? We don't really know, so we generate \\~ *all*.\n    Huh. And select that C/A code to wipe off which shows good proximity\n    with received C/A code. [(This is called, in telecom language, a\n    ***Code Matched Filter*** and ***Rake Receiver***. Ask me what this\n    looks like, at your peril.)]{.black .bg-gold}\n\n-   A **Time Proximity**, by correcting its own local clock to match the\n    satellite clocks, accurately. (This is called, in telecom language\n    again, a **Delay-Lock Loop**. Peril again.)\n\n### Code Proximity Measurement\n\n![Code Proximity Measure](images/autocorr.jpeg){#fig-code-autocorr}\n\nIn the @fig-code-autocorr above, the red curve shows the Hamming\nDistance between a received C/A code, and its locally generated copy.\nOnly when the proximity between them is within one-chip does the measure\nhave any sensible amplitude. (This is called ***Autocorrelation***.)\n\nThe blue curve show Hamming Distance proximity between a received C/A\ncode and **any other** C/A code. At no overlap position do these\ndissimilar codes have a useful proximity measure. (This is known as\n**Cross-Correlation**).\n\nC/A codes are ***designed*** to have that spike-like autocorrelation,\nand that fuzz like cross-correlation to aid in proximity-based\nsynchronization and code wipe-off.\n\n### A Brief Foray into Cryptography\n\nIn the Sherlock Holmes story,<u>[**The Adventure of the Dancing\nMen**](https://www.gutenberg.org/files/108/108-h/108-h.htm#chap03)</u>,\na criminal known the one of the characters communicates with her using a\nchildish/child-like drawing which looks like this:\n\n![](images/img01.jpg) In this message, each character is a visual\nrepresentation, or a substution for, a letter from the alphabet. The\ncharacters with flags are the first letter of a new word. The message is\ntranslated in the story as \"Am here, Abe Slaney\".\n\nThe entire **code alphabet** is shown in the figure below:\n![](images/dancing-men-cipher-overview.png)\n\nThis code is a good example of a <u>[**Substitution\nCipher**](https://www.geeksforgeeks.org/substitution-cipher/)</u> with\nnon-text substition. See\n<u><https://www.boxentriq.com/code-breaking/dancing-men-cipher></u> and\n<u><https://www.dcode.fr/dancing-men-cipher></u> for examples where you\ncan encode and decode your own text, and send them to friends.\n😎 😼\n\nThe intent behind any substitution cipher is to be create **distance**\nfrom the original message, or characters. The algorithms to encode and\ndecode uses this idea of **distance** to perform their operations and\nare entirely reversible.\n\n## Painting with Proximity/Distance\n\nWell, all right, all right, tech is fine. Can we use the idea of\nProximity to create **art**? Well, we are not Kandinsky, but we can try.\nHere goes:\n\n-   Fire up the Strava app, or equivalent, on your phones.\n-   Walk out into the college campus, preferably under open sky.\n-   With the app on, try to create a figure <u>[like\n    this](https://gpsart.info/en/gpsart-en/nowhow1-en/)</u>\n-   Share the image with your friend!\n\n## <u>[Wait, But Why?](https://waitbutwhy.com)</u>\n\nHere are some domains and purposes within them, that use the idea of\nProximity, and use Voronoi/Delaunay diagrams in their work. From\n<u>[David Eppstein's *Geometry in Action* webpage at Univ. of California, ~~Arvind~~ Irvine](https://www.ics.uci.edu/~eppstein/gina/scot.drysdale.html) :\n</u>\n\n-   Anthropology and Archaeology:\n    - *Identify the parts of a region under\n    the influence of different neolithic clans, chiefdoms, ceremonial\n    centers, or hill forts*.\\\n-   Astronomy:\n    - *Identify clusters of stars and clusters of galaxies\n    (Here may be the earliest picture of a Voronoi diagram,\n    drawn by Descartes in 1644, where the regions described the regions\n    of gravitational influence of the sun and other stars.)*\\\n-   Biology, Ecology, Forestry:\n    - *Model and analyze plant competition (\"Area potentially available to a tree\", \"Plant polygons\")*\\\n-   Cartography:\n    - *Piece together satellite photographs into large\n    \"mosaic\" maps*\\\n-   Crystallography and Chemistry:\n    - *Study chemical properties of metallic sodium (\"Wigner-Seitz regions\"); \n    - Modelling alloy structures as sphere-packings (\"Domain of an atom\")*\\\n-   Finite Element Analysis:\n    - *Generating finite element meshes which avoid small angles*\\\n-   Geography:\n    - *Analyzing patterns of urban settlements*. See also\n    [Christopher Alexander's Pattern\n    Language](https://www.patternlanguage.com)\\\n-   Geology:\n    - *Estimation of ore reserves in a deposit using\n    information obtained from bore holes; modelling crack patterns in\n    basalt due to contraction on cooling*\\\n-   Geometric Modeling:\n    - *Finding \"good\" triangulations of 3D surfaces*\\\n-   Marketing:\n    - *Model market of metropolitan areas; market area extending down to individual retail stores*\\\n-   Mathematics:\n    - *Study of positive definite quadratic forms (\"Dirichlet tesselation\", \"Voronoi diagram\")*\\\n-   Metallurgy:\n    - *Modelling \"grain growth\" in metal films*\\\n-   Meteorology:\n    - *Estimate regional rainfall averages, given data at\n    discrete rain gauges (\"Thiessen polygons\")*\\\n-   Pattern Recognition:\n    - *Find simple descriptors for shapes that\n    extract 1D characterizations from 2D shapes (\"Medial axis\" or\n    \"skeleton\" of a contour)*\\\n-   Physiology:\n    - *Analysis of capillary distribution in cross-sections\n    of muscle tissue to compute oxygen transport (\"Capillary domains\")*\\\n-   Robotics/ Autonomous Vehicles:\n    - *Path planning in the presence of obstacles*\\\n-   Statistics and Data Analysis: \n    - *Analyze statistical clustering (\"Natural neighbors\" interpolation)*\\\n-   Zoology:\n    - *Model and analyze the territories of animals*\n\n## References\n\n1.  <u>**Voronoi Diagrams and a Day at the Beach**\n    [**(PDF)**](/pdf/Proximity/VoronoiDiagrams-ADayAtTheBeach.pdf)</u>\n    Talks about cholera in Soho, the Voronoi diagram, and how to\n    construct it using waves on a beach!!\n2.  Data Genetics. <u>[*Voronoi\n    Tessellations*.](http://datagenetics.com/blog/may12017/index.html)</u>\n    Very interesting 3D pictures of how Voronois and Delaunays are\n    created.\n3.  Gorilla Sun Blog.\n    <u><https://www.gorillasun.de/blog/delaunay-triangulation-and-voronoi-diagrams/></u>\n4.  How are Codes used in GPS?\n    <u><https://natronics.github.io/blag/2014/gps-viz-1/></u>\n5.  How Do Codes Work in GPS?\n    <u><https://natronics.github.io/blag/2014/gps-prn/></u>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}